{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Slot","props","number","state","setState","useDrop","accept","canDrop","item","monitor","console","log","JSON","stringify","drop","newState","collect","mon","isOver","isFilled","elementData","elements","style","width","height","border","margin","display","background","overflow","textAlign","fontSize","symbol","name","ref","color","boxShadow","SlotRow","from","to","boxes","i","push","key","Spacer","SpacerRow","count","ElementTile","atomicMass","useDrag","type","isDragging","drag","opacity","PeriodicTableSlots","App","useState","map","x","table","setTable","options","length","sort","a","b","DndProvider","backend","Backend","Fragment","element","atomicNumber","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.bee91729.chunk.js","sourcesContent":["import React, {useState, ReactFragment} from 'react';\nimport './App.css';\nimport elements from './elements.json';\nimport { DndProvider, useDrag, useDrop } from 'react-dnd'\nimport Backend from 'react-dnd-html5-backend'\n\n// TODO: Drag and drop shows a pointer, allows dirty cheaters, dirty dirty cheaters, hate them\n\n// let cookiesPerDayForToday = [1,5,2,4,6,5,4,3,2,1]\n// let familyMember = ['sheryl', 'toby', 'brody', 'cj']\n// let familyMembersToCookies = {'sheryl': 3, 'toby': 2, 'brody': 5001, 'cj': 6}\n// let familyMembersToDailyHistory = {'sheryl': [5,1,2,3,1], 'toby': [52,5,2,1], 'brody': [6,1,2,3,1,1], 'cj': 6}\n\n\n// class Person {\n//   constructor(name, height, weight) {\n//     this.name = name;\n//     this.height = height;\n//     this.weight = weight;\n//   }\n\n// }\n\n// let familyToLotsO = {'sheryl': Person('Sheryl Traylor', 110, 12*5+4), 'brody': Person(2,7)}\n\n// function square(x) {\n//   return x * x;\n// }\n// let answer = square(5)\n\n// function muliplyNumbers(q, y) {\n//   return x * y;\n// }\n\n// let result = multiplyNumbers(15, 45);\n\nconst Slot = (props) => {\n  const { number, state, setState } = props; \n  if (!state) {\n    throw `blah ${number}`\n  }\n\n  const [{ isOver }, drop] = useDrop({\n    accept: \"TILE\",\n    //drop: () => moveKnight(x, y),\n    canDrop: (item, monitor) => {\n      console.log(JSON.stringify(item))\n      return (item.number == number)\n    },\n    drop: (item, monitor) => {\n      let newState = [...state]\n      newState[number-1] = true\n      setState(newState)\n    },\n    collect: (mon) => ({\n      isOver: !!mon.isOver()\n    }),\n  })\n\n  const isFilled = state[number-1]\n  const elementData = elements[number-1]\n  let tileKids;\n  if(isFilled) {\n    return (\n      <div\n          style={{width: '4vw', \n                  height: '4vw', \n                  border: '2px solid black', \n                  margin: \"1px\", \n                  display: 'inline-block',\n                  background: '#9fa1d4',\n                  overflow: 'hidden',\n                  textAlign: \"center\"}}>\n        <div style={{fontSize: '2vw'}}>{elementData.symbol}</div>\n        <div style={{fontSize: '.7vw'}}>{elementData.name}</div>\n      </div>\n    )\n  } else {\n    return (\n      <div ref={drop}  \n          style={{width: '4vw', \n                  height: '4vw', \n                  border: '2px solid black', \n                  margin: \"1px\", \n                  color: '#eee',\n                  display: 'inline-block',\n                  boxShadow: 'inset 0px 0px 9px #606180',\n                  background: (isOver) ? '#ddd' : '#888',\n                  overflow: 'hidden',\n                  textAlign: 'center',\n                  }}>\n          <div>\n            <div style={{fontSize: \".9vw\"}}>{number}</div>\n          </div>\n      </div>\n    )\n  }\n \n}\n\nconst SlotRow = (props) => {\n  const { from, to, state, setState } = props;\n  let boxes = [];\n  for (let i=from; i <= to; i++) {\n    boxes.push(<Slot key={i} number={i} state={state} setState={setState}/>)\n  }\n  return boxes;\n}\n\nconst Spacer = () => (\n  <div style={{width: '4vw', \n        height: '4vw',\n        border: '2px solid white', \n        margin: \"1px\", \n        display: 'inline-block',\n        background: \"#fff\",\n        overflow: 'hidden',\n    }}>\n  </div>\n)\n\nconst SpacerRow = (props) => {\n  let boxes = [];\n  for (let i=0; i < props.count; i++) {\n    boxes.push(<Spacer key={i} />)\n  }\n  return boxes;\n}\n\n\n// TODO: (Toby Traylor) wrap problem\n\nconst ElementTile = (props) => {\n  const { number, symbol, name, atomicMass } = props; \n  const [ {isDragging}, drag] = useDrag({\n    item: { type: 'TILE', number: number },\n\t\tcollect: monitor => ({\n\t\t\tisDragging: !!monitor.isDragging(),\n\t\t}),\n  })\n  return (\n    <div ref={drag} \n        style={{width: '4vw', \n        height: '4vw', \n        border: '2px solid black', \n        margin: \"1px\", \n        display: 'inline-block',\n        background: '#9fa1d4',\n        textAlign: \"center\",\n        opacity: isDragging ? 0.5 : 1}}>\n\n      <div style={{fontSize: '2vw'}}>{symbol}</div>\n      <div style={{fontSize: '.7vw'}}>{name}</div>\n    </div>\n  )\n}\n\nconst PeriodicTableSlots = ({state, setState}) => {\n  return (\n    <div style={{textAlign: 'center'}}>\n      <div>\n        <Slot number={1} state={state} setState={setState}/>\n        <SpacerRow count={16} state={state} setState={setState}/>\n        <Slot number={2} state={state} setState={setState}/>\n      </div>\n      <div>\n        <SlotRow from={3} to={4} state={state} setState={setState}/>\n        <SpacerRow count={10} state={state} setState={setState}/>\n        <SlotRow from={5} to={10} state={state} setState={setState}/>\n      </div>\n      <div>\n        <SlotRow from={11} to={12} state={state} setState={setState}/>\n        <SpacerRow count={10} state={state} setState={setState}/>\n        <SlotRow from={13} to={18} state={state} setState={setState}/>\n      </div>\n      <div>\n        <SlotRow from={19} to={36} state={state} setState={setState}/>\n      </div>\n      <div>\n        <SlotRow from={37} to={54} state={state} setState={setState}/>\n      </div>\n      <div>\n        <SlotRow from={55} to={56} state={state} setState={setState}/>\n        <Spacer />\n        <SlotRow from={72} to={86} state={state} setState={setState}/>\n      </div>\n      <div>\n        <SlotRow from={87} to={88} state={state} setState={setState}/>\n        <Spacer />\n        <SlotRow from={104} to={118} state={state} setState={setState}/>\n      </div>\n      <div>\n        <Spacer />\n      </div>\n      <div>\n      <Spacer />\n        <Spacer />\n        <Spacer />\n        <SlotRow from={57} to={71} state={state} setState={setState}/>\n      </div>\n     \n      <div>\n        <Spacer />\n        <Spacer />\n        <Spacer />\n        <SlotRow from={89} to={103} state={state} setState={setState}/>\n      </div>\n    </div>\n  );\n}\n\n\n\nconst App = () => {\n  const [table, setTable] = useState(elements.map((x) => {return false}))\n  let options = []\n  for (var i=0; i< table.length; i++) {\n    if (!table[i]) {\n      options.push(elements[i])\n    }\n  }\n  options.sort((a,b) => (a.name > b.name) ? 1 : -1)\n  \n  return (\n    <DndProvider backend={Backend}>\n      <React.Fragment>\n        <PeriodicTableSlots state={table} setState={setTable}></PeriodicTableSlots>\n\n        {options.map((element) => \n          <ElementTile  key={element.atomicNumber}\n                        number={element.atomicNumber} \n                        symbol={element.symbol} \n                        name={element.name} \n                        atomicMass={element.atomicMass} ></ElementTile> )}\n        \n      </React.Fragment>\n    </DndProvider>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}