{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["PeriodicTableSlots","ElementTile","props","number","symbol","name","atomicMass","style","width","height","border","margin","display","background","textAlign","fontSize","App","elements","sort","a","b","Fragment","map","element","atomicNumber","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yupDA0EA,SAASA,KAuDT,IAAMC,EAAc,SAACC,GAC0BA,EAArCC,OADsB,IACdC,EAA6BF,EAA7BE,OAAQC,EAAqBH,EAArBG,KAAqBH,EAAfI,WAC9B,OACE,yBAAKC,MAAO,CAACC,MAAO,OACRC,OAAQ,OACRC,OAAQ,kBACRC,OAAQ,MACRC,QAAS,eACTC,WAAY,OACZC,UAAW,WACrB,0BAAMP,MAAO,CAACQ,SAAU,SAAUX,GAAc,6BAChD,0BAAMG,MAAO,CAACQ,SAAU,SAAxB,IAAmCV,EAAnC,OAqBSW,EAhBH,WAEV,OADAC,EAASC,MAAK,SAACC,EAAEC,GAAH,OAAUD,EAAEd,KAAOe,EAAEf,KAAQ,GAAK,KAE9C,kBAAC,IAAMgB,SAAP,KACE,kBAACrB,EAAD,MAECiB,EAASK,KAAI,SAACC,GAAD,OACZ,kBAAC,EAAD,CAAcpB,OAAQoB,EAAQC,aAChBpB,OAAQmB,EAAQnB,OAChBC,KAAMkB,EAAQlB,KACdC,WAAYiB,EAAQjB,kBC/ItBmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d5597b62.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport elements from './elements.json';\n\n\n// let cookiesPerDayForToday = [1,5,2,4,6,5,4,3,2,1]\n// let familyMember = ['sheryl', 'toby', 'brody', 'cj']\n// let familyMembersToCookies = {'sheryl': 3, 'toby': 2, 'brody': 5001, 'cj': 6}\n// let familyMembersToDailyHistory = {'sheryl': [5,1,2,3,1], 'toby': [52,5,2,1], 'brody': [6,1,2,3,1,1], 'cj': 6}\n\n\n// class Person {\n//   constructor(name, height, weight) {\n//     this.name = name;\n//     this.height = height;\n//     this.weight = weight;\n//   }\n\n// }\n\n// let familyToLotsO = {'sheryl': Person('Sheryl Traylor', 110, 12*5+4), 'brody': Person(2,7)}\n\n// function square(x) {\n//   return x * x;\n// }\n// let answer = square(5)\n\n// function muliplyNumbers(q, y) {\n//   return x * y;\n// }\n\n// let result = multiplyNumbers(15, 45);\n\nconst Box = (props) => {\n  const { number } = props; \n  return (\n    <div style={{width: '5vw', \n                height: '5vw', \n                border: '2px solid black', \n                margin: \"1px\", \n                display: 'inline-block',\n                boxShadow: 'inset 0px 0px 9px #005060',\n                background: '#fff'}}>\n      {number}\n    </div>\n  )\n}\n\nconst EmptyBox = () => (\n  <div style={{width: '5vw', height: '5vw', border: '2px solid white', margin: \"1px\", display: 'inline-block'}}>\n    &nbsp; \n  </div>\n)\n\nconst BoxRow = (props) => {\n  const { from, to } = props;\n  let boxes = [];\n  for (let i=from; i <= to; i++) {\n    boxes.push(<Box number={i}></Box>)\n  }\n  return boxes;\n}\n\nconst EmptyBoxRow = (props) => {\n  let boxes = [];\n  for (let i=0; i < props.count; i++) {\n    boxes.push(<EmptyBox></EmptyBox>)\n  }\n  return boxes;\n}\n\n\n// TODO: (Toby Traylor) wrap problem\n\nfunction PeriodicTableSlots() {\n  return (\n    // style={{backgroundImage: 'linear-gradient(217deg, #DDA0DD, #50EFFF)', height: '100vh'}\n    <div >\n      <div>\n        <Box number={1}>     </Box>\n        <EmptyBoxRow count={16}></EmptyBoxRow>\n        <Box number={2}></Box>\n      </div>\n      <div>\n        <BoxRow from={3} to={4}></BoxRow>\n        <EmptyBoxRow count={10}></EmptyBoxRow>\n        <BoxRow from={5} to={10}></BoxRow>\n      </div>\n      <div>\n        <BoxRow from={11} to={12}></BoxRow>\n        <EmptyBoxRow count={10}></EmptyBoxRow>\n        <BoxRow from={13} to={18}></BoxRow>\n      </div>\n      <div>\n        <BoxRow from={19} to={36}></BoxRow>\n      </div>\n      <div>\n        <BoxRow from={37} to={54}></BoxRow>\n      </div>\n      <div>\n        <BoxRow from={55} to={56}></BoxRow>\n        <EmptyBox></EmptyBox>\n        <BoxRow from={72} to={86}></BoxRow>\n      </div>\n      <div>\n        <BoxRow from={87} to={88}></BoxRow>\n        <EmptyBox></EmptyBox>\n        <BoxRow from={104} to={118}></BoxRow>\n      </div>\n      <div>\n        <EmptyBox></EmptyBox>\n      </div>\n      <div>\n        <EmptyBox></EmptyBox>\n        <EmptyBox></EmptyBox>\n        <EmptyBox></EmptyBox>\n        <BoxRow from={57} to={71}></BoxRow>\n      </div>\n     \n      <div>\n        <EmptyBox></EmptyBox>\n        <EmptyBox></EmptyBox>\n        <EmptyBox></EmptyBox>\n        <BoxRow from={89} to={103}></BoxRow>\n      </div>\n    </div>\n  );\n}\n\nconst ElementTile = (props) => {\n  const { number, symbol, name, atomicMass } = props; \n  return (\n    <div style={{width: '64px', \n                height: '64px', \n                border: '2px solid black', \n                margin: \"1px\", \n                display: 'inline-block',\n                background: '#fff',\n                textAlign: \"center\"}}>\n      <span style={{fontSize: \"23pt\"}}>{symbol}</span><br />\n      <span style={{fontSize: \"10pt\"}}> {name} </span>\n    </div>\n  )\n}\n\nconst App = () => {\n  elements.sort((a,b) => (a.name > b.name) ? 1 : -1)\n  return (\n    <React.Fragment>\n      <PeriodicTableSlots></PeriodicTableSlots>\n\n      {elements.map((element) => \n        <ElementTile  number={element.atomicNumber} \n                      symbol={element.symbol} \n                      name={element.name} \n                      atomicMass={element.atomicMass} ></ElementTile> )}\n      \n    </React.Fragment>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}